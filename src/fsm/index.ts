import { Context, Markup } from "telegraf";
import { getCities } from "../cities";
import { generateGuide } from "../generateGuide";
import { fsmStore } from "./store";
import { Step } from "./types";
import { hideKeyboard } from "../utils/hideKeyboard";
import { findOrCreateUser } from "../findOrCreateUser";

type FSMConfig = {
  [state in Step]: {
    onEnter: (chatId: number, ctx: Context) => Promise<void>;
    onText?: (chatId: number, ctx: Context) => Promise<void>;
    onAction?: (chatId: number, ctx: Context, action: string) => Promise<void>;
  };
};

export const FSM: FSMConfig = {
  start: {
    onEnter: async (chatId, ctx) => {
      console.log("start onEnter");
      await fsmStore.set(chatId, { step: "start" });
      await FSM["start_flow"].onEnter(chatId, ctx);
    },
  },

  start_flow: {
    onEnter: async (chatId, ctx) => {
      console.log("start_flow onEnter");
      await fsmStore.set(chatId, { step: "start_flow" });
      await ctx.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI-–≥–∏–¥ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º.\n\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É? üöÄ",
        Markup.inlineKeyboard(
          [Markup.button.callback("üöÄ –ù–∞—á–∞—Ç—å", "start_flow")],
          {}
        )
      );
    },

    onAction: async (chatId, ctx) => {
      console.log("start_flow onAction");

      await hideKeyboard(ctx);
      await fsmStore.set(chatId, { step: "start_flow" });
      await FSM["wait_city"].onEnter(chatId, ctx);
    },
  },

  wait_city: {
    onEnter: async (chatId, ctx) => {
      await fsmStore.update(chatId, { step: "wait_city" });
      const cities = await getCities();
      const buttons = cities.map(({ id, name }) =>
        Markup.button.callback(name, `city_${id}`)
      );
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        Markup.inlineKeyboard(buttons, { columns: 2 })
      );
    },
    onAction: async (chatId, ctx, action) => {
      await fsmStore.update(chatId, { step: "wait_city" });
      const match = action.match(/^city_(\d+)$/);
      if (!match) return;
      const selectedCityId = parseInt(match[1]);
      const cities = await getCities();
      const city = cities.find((c) => c.id === selectedCityId);
      if (!city) {
        await ctx.answerCbQuery("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await fsmStore.update(chatId, { cityId: selectedCityId });
      await ctx.answerCbQuery();
      await ctx.editMessageText(`üèô –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: ${city.name}`);
      await FSM["wait_days"].onEnter(chatId, ctx);
    },
  },

  wait_days: {
    onEnter: async (chatId, ctx) => {
      console.log("wait_days onEnter");
      await fsmStore.update(chatId, { step: "wait_days" });
      await ctx.reply("üóì –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ç—É–¥–∞ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å?");
    },
    onText: async (chatId, ctx) => {
      console.log("wait_days onText");
      await fsmStore.update(chatId, { step: "wait_days" });
      const text = ctx.message && "text" in ctx.message ? ctx.message.text : "";
      const days = parseInt(text || "");
      if (isNaN(days) || days <= 0) {
        await ctx.reply("‚õî –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π");
        return;
      }

      if (days > 10) {
        await ctx.reply("‚õî –ú–∞–∫—Å–∏–º—É–º 10 –¥–Ω–µ–π");
        return;
      }

      await fsmStore.update(chatId, {
        days: days,
      });
      await FSM["payment_onboarding"].onEnter(chatId, ctx);
    },
  },

  payment_onboarding: {
    onEnter: async (chatId, ctx) => {
      await fsmStore.update(chatId, { step: "payment_onboarding" });
      await ctx.reply(
        `
‚ú® –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–∞–π–¥ –ø–æ –¢–±–∏–ª–∏—Å–∏ –Ω–∞ 3 –¥–Ω—è:

üìå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç  
üèõ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞  
üçΩ –õ–æ–∫–∞–ª—å–Ω–∞—è –µ–¥–∞  
üß† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI

–°—Ç–æ–∏–º–æ—Å—Ç—å: **399 ‚ÇΩ**

–ì–∞–π–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.        
`,
        Markup.inlineKeyboard([
          Markup.button.callback("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "start_payment"),
        ])
      );
    },
    onAction: async (chatId, ctx, action) => {
      await fsmStore.update(chatId, { step: "payment_onboarding" });
      await hideKeyboard(ctx);
      console.log("payment_onboarding onAction", action);

      const user = await findOrCreateUser({
        telegramId: chatId,
        firstName: ctx.from?.first_name,
        username: ctx.from?.username,
      });

      console.log("user", user);

      if (user) {
        await FSM["payment_success"].onEnter(chatId, ctx);
      } else {
        await FSM["payment_error"].onEnter(chatId, ctx);
      }

      // await ctx.answerCbQuery();
      // await ctx.editMessageText("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å");
    },
  },

  payment_success: {
    onEnter: async (chatId, ctx) => {
      await fsmStore.update(chatId, { step: "payment_success" });
      await hideKeyboard(ctx);
      await ctx.reply("üí≥ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ üôè");
      await ctx.reply(
        "üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –≥–∞–π–¥... —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥..."
      );

      const state = await fsmStore.get(chatId);
      if (!state) {
        console.error("State is not defined");
        return;
      }
      const cities = await getCities();
      const city = cities.find((c) => c.id === state.cityId!);
      if (!city) {
        return FSM["wait_city"].onEnter(chatId, ctx);
      }

      generateGuide({
        chatId: chatId,
        cityId: state.cityId!,
        days: state.days!,
      });

      await FSM["done"].onEnter(chatId, ctx);
    },
  },

  payment_error: {
    onEnter: async (chatId, ctx) => {
      await fsmStore.update(chatId, { step: "payment_error" });
      await ctx.reply("üí≥ –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");

      await ctx.reply(
        "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?",
        Markup.inlineKeyboard([
          Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "start_flow"),
          Markup.button.callback("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", "wait_city"),
        ])
      );
    },

    onAction: async (chatId, ctx, action) => {
      await fsmStore.update(chatId, { step: "payment_error" });
      await hideKeyboard(ctx);
      if (action === "start_flow") {
        await FSM["payment_onboarding"].onEnter(chatId, ctx);
      } else if (action === "wait_city") {
        await FSM["wait_city"].onEnter(chatId, ctx);
      }
    },
  },

  done: {
    onEnter: async (chatId, ctx) => {
      await fsmStore.update(chatId, { step: "done" });
      await ctx.reply("üöÄ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∞–π–¥:");
      await ctx.reply("üîó https://prstrvl.ru/guides/3hd9fcqk1j29fsd13");
      await ctx.reply(
        "–¢—ã –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ, —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è! üåç"
      );
      await fsmStore.update(chatId, { step: "start" });
    },
  },
};
